--- console-100644.js	2011-06-18 12:32:08.000000000 +0300
+++ console.js	2011-06-17 01:13:33.000000000 +0300
@@ -19,33 +19,6 @@
 // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 // USE OR OTHER DEALINGS IN THE SOFTWARE.
 
-var events = require('events');
-
-
-exports.print = function() {
-  for (var i = 0, len = arguments.length; i < len; ++i) {
-    process.stdout.write(String(arguments[i]));
-  }
-};
-
-
-exports.puts = function() {
-  for (var i = 0, len = arguments.length; i < len; ++i) {
-    process.stdout.write(arguments[i] + '\n');
-  }
-};
-
-
-exports.debug = function(x) {
-  process.binding('stdio').writeError('DEBUG: ' + x + '\n');
-};
-
-
-var error = exports.error = function(x) {
-  for (var i = 0, len = arguments.length; i < len; ++i) {
-    process.binding('stdio').writeError(arguments[i] + '\n');
-  }
-};
 
 
 /**
@@ -59,7 +32,10 @@
  * @param {Boolean} colors Flag to turn on ANSI escape codes to color the
  *    output. Default is false (no coloring).
  */
-exports.inspect = function(obj, showHidden, depth, colors) {
+JSConsole = (function(){
+
+var MAX_COLUMNS = 50;
+inspect = function(obj, showHidden, depth, colors) {
   var seen = [];
 
   var stylize = function(str, styleType) {
@@ -105,8 +81,6 @@
     // Provide a hook for user-specified inspect functions.
     // Check that value is an object with an inspect function on it
     if (value && typeof value.inspect === 'function' &&
-        // Filter out the util module, it's inspect function is special
-        value !== exports &&
         // Also filter out any prototype objects using the circular check.
         !(value.constructor && value.constructor.prototype === value)) {
       return value.inspect(recurseTimes);
@@ -258,7 +232,7 @@
       return prev + cur.length + 1;
     }, 0);
 
-    if (length > (require('readline').columns || 50)) {
+    if (length > (MAX_COLUMNS || 50)) {
       output = braces[0] +
                (base === '' ? '' : base + '\n ') +
                ' ' +
@@ -305,23 +279,6 @@
 }
 
 
-var pWarning;
-
-exports.p = function() {
-  if (!pWarning) {
-    pWarning = 'util.p will be removed in future versions of Node. ' +
-               'Use util.puts(util.inspect()) instead.\n';
-    exports.error(pWarning);
-  }
-  for (var i = 0, len = arguments.length; i < len; ++i) {
-    error(exports.inspect(arguments[i]));
-  }
-};
-
-
-function pad(n) {
-  return n < 10 ? '0' + n.toString(10) : n.toString(10);
-}
 
 
 var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
@@ -336,98 +293,9 @@
   return [d.getDate(), months[d.getMonth()], time].join(' ');
 }
 
-
-exports.log = function(msg) {
-  exports.puts(timestamp() + ' - ' + msg.toString());
-};
-
-
-var execWarning;
-exports.exec = function() {
-  if (!execWarning) {
-    execWarning = 'util.exec has moved to the "child_process" module.' +
-                  ' Please update your source code.';
-    error(execWarning);
-  }
-  return require('child_process').exec.apply(this, arguments);
-};
-
-
-exports.pump = function(readStream, writeStream, callback) {
-  var callbackCalled = false;
-
-  function call(a, b, c) {
-    if (callback && !callbackCalled) {
-      callback(a, b, c);
-      callbackCalled = true;
-    }
-  }
-
-  if (!readStream.pause) {
-    readStream.pause = function() {readStream.emit('pause');};
-  }
-
-  if (!readStream.resume) {
-    readStream.resume = function() {readStream.emit('resume');};
-  }
-
-  readStream.addListener('data', function(chunk) {
-    if (writeStream.write(chunk) === false) readStream.pause();
-  });
-
-  writeStream.addListener('pause', function() {
-    readStream.pause();
-  });
-
-  writeStream.addListener('drain', function() {
-    readStream.resume();
-  });
-
-  writeStream.addListener('resume', function() {
-    readStream.resume();
-  });
-
-  readStream.addListener('end', function() {
-    writeStream.end();
-  });
-
-  readStream.addListener('close', function() {
-    call();
-  });
-
-  readStream.addListener('error', function(err) {
-    writeStream.end();
-    call(err);
-  });
-
-  writeStream.addListener('error', function(err) {
-    readStream.destroy();
-    call(err);
-  });
-};
+return {
+  inspect: inspect
+}
+})();
 
 
-/**
- * Inherit the prototype methods from one constructor into another.
- *
- * The Function.prototype.inherits from lang.js rewritten as a standalone
- * function (not on Function.prototype). NOTE: If this file is to be loaded
- * during bootstrapping this function needs to be revritten using some native
- * functions as prototype setup using normal JavaScript does not work as
- * expected during bootstrapping (see mirror.js in r114903).
- *
- * @param {function} ctor Constructor function which needs to inherit the
- *     prototype.
- * @param {function} superCtor Constructor function to inherit prototype from.
- */
-exports.inherits = function(ctor, superCtor) {
-  ctor.super_ = superCtor;
-  ctor.prototype = Object.create(superCtor.prototype, {
-    constructor: {
-      value: ctor,
-      enumerable: false,
-      writable: true,
-      configurable: true
-    }
-  });
-};
\ No newline at end of file
